name: 应用程序打包

permissions:
  contents: write

on:
  push:
    branches:
      - main

jobs:
  Set-Version:
    runs-on: windows-latest

    steps:
    - name: 检出代码
      uses: actions/checkout@v2

    - name: 更新版本号
      run: |
        python .github/workflows/refresh-version.py

    - name: 提交版本号更新到仓库
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git add Time-Machine-Setup.iss
        git add config.json
        git commit -m "更新 MyAppVersion 版本号和一些配置文件的默认值。"
        git push
      shell: pwsh
  Build-Windows:
    needs: Set-Version
    runs-on: windows-latest

    env:
      PYTHON_VERSION: '3.9'
      OUTPUT_DIR: 'output'
      ARTIFACT_NAME: 'Time-Machine-Windows.zip'

    steps:
    - name: 检出最新版本
      uses: actions/checkout@v2
      with:
        ref: 'main'

    - name: 验证资源文件路径
      run: |
        Get-ChildItem -Path .
        if (-not (Test-Path "Time-Machine.ico")) { Write-Host "bloret.ico not found"; exit 1 }
        if (-not (Test-Path "config.json")) { Write-Host "config.json not found"; exit 1 }
        if (-not (Test-Path "ui")) { Write-Host "ui directory not found"; exit 1 }
      shell: pwsh

    - name: 设置 Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 安装程序依赖和打包依赖
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install pillow
        pip install pyinstaller
    
    - name: 使用 PyInstaller 打包
      run: |
        pyinstaller --onefile --noconsole --icon=Time-Machine.ico --name=Time-Machine `
          --add-data "Time-Machine.ico;." `
          --add-data "config.json;." `
          --add-data "ui;ui" `
          --hidden-import=sip `
          --hidden-import=qfluentwidgets `
          --hidden-import=win11toast `
          --hidden-import=httpx `
          --paths=. `
          Time-Machine.py
      shell: pwsh

    - name: 创建包含其他文件夹的目录
      run: |
        mkdir -p ${{ env.OUTPUT_DIR }}
        cp dist/Time-Machine.exe ${{ env.OUTPUT_DIR }}/
        cp -r ui/ ${{ env.OUTPUT_DIR }}/
        cp -r config.json ${{ env.OUTPUT_DIR }}/
        cp -r LICENSE ${{ env.OUTPUT_DIR }}/
        cp -r Time-Machine.ico ${{ env.OUTPUT_DIR }}/

    - name: 清理旧压缩包
      run: |
        if (Test-Path "${{ env.OUTPUT_DIR }}/${{ env.ARTIFACT_NAME }}") {
          Remove-Item "${{ env.OUTPUT_DIR }}/${{ env.ARTIFACT_NAME }}"
        }
      shell: pwsh

    - name: 创建压缩包
      run: Compress-Archive -Path "${{ env.OUTPUT_DIR }}/*" -DestinationPath "${{ env.OUTPUT_DIR }}/${{ env.ARTIFACT_NAME }}"
      shell: pwsh

    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: Time-Machine
        path: "${{ env.OUTPUT_DIR }}/${{ env.ARTIFACT_NAME }}"
  Code-Package:
    needs: Set-Version
    runs-on: windows-latest

    steps:
    - name: 检出最新版本
      uses: actions/checkout@v2
      with:
        ref: 'main'

    - name: 创建输出目录并清理
      run: |
        # 强制创建目录并清理旧内容
        New-Item -ItemType Directory -Force -Path "output"
        Remove-Item -Path "output/*" -Recurse -ErrorAction Ignore
      shell: pwsh

    - name: 复制所有文件（排除 .git 和 output）
      run: |
        # 递归复制所有文件到 output 目录，排除 .git 和 output 目录
        Copy-Item -Path "*" -Destination "output" -Recurse -Exclude @(".git", "output")
        # 确保 LICENSE 文件被复制
        if (Test-Path "LICENSE") {
          Copy-Item -Path "LICENSE" -Destination "output\"
        } else {
          Write-Host "LICENSE 文件未找到"
          exit 1
        }
      shell: pwsh

    - name: 创建压缩包
      run: |
        # 直接压缩 output 目录内容为 Code-Package.zip
        Compress-Archive -Path "output/*" -DestinationPath "output/Code-Package.zip" -Force
      shell: pwsh

    - name: 上传压缩包
      uses: actions/upload-artifact@v4
      with:
        name: Code-Package
        path: "output/Code-Package.zip"
  Build-Setup:
    needs: Build-Windows
    runs-on: windows-latest

    steps:
    - name: 检出最新版本
      uses: actions/checkout@v2
      with:
        ref: 'main'

    - name: 下载构建产物
      uses: actions/download-artifact@v4
      with:
        name: Time-Machine
        path: output

    - name: 解压构建产物
      run: |
        Expand-Archive -Path "output/Time-Machine-Windows.zip" -DestinationPath "output/"
      shell: pwsh

    - name: 确保 LICENSE 文件存在
      run: |
        if (-not (Test-Path "output/LICENSE")) {
          Write-Host "LICENSE 文件未找到"
          exit 1
        }
      shell: pwsh

    - name: 展示完整文件夹目录
      run: |
        Write-Host "当前文件夹目录结构如下："
        Get-ChildItem -Path "output" -Recurse | Format-Table -AutoSize
      shell: pwsh

    - name: 设置系统语言为简体中文
      run: |
        Set-WinSystemLocale -SystemLocale zh-CN
        Write-Host "系统语言已设置为简体中文"
      shell: pwsh

    - name: 安装 Inno Setup
      run: |
        choco install innosetup --yes
      shell: pwsh

    - name: 运行 Inno Setup 构建安装程序
      run: |
        & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" ".\Time-Machine-Setup.iss"
      shell: pwsh

    - name: 上传安装程序
      uses: actions/upload-artifact@v4
      with:
        name: Time-Machine-Setup
        path: "./output/Time Machine Setup.exe"
  Build-macOS:
    needs: Set-Version
    runs-on: macos-latest
    env:
      PYTHON_VERSION: '3.9'
      OUTPUT_DIR: 'output'
      ARTIFACT_NAME: 'Time-Machine-macOS.zip'
    steps:
    - name: 检出最新版本
      uses: actions/checkout@v2
      with:
        ref: 'main'
    - name: 验证资源文件路径
      run: |
        ls -alh .
        [ -f "Time-Machine.ico" ] || (echo "bloret.ico not found" && exit 1)
        [ -f "config.json" ] || (echo "config.json not found" && exit 1)
        [ -d "ui" ] || (echo "ui directory not found" && exit 1)
      shell: bash
    - name: 设置 Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: 过滤掉 pywin32 和 win11toast 依赖
      run: |
        grep -ivE '^(pywin32|win11toast)' requirements.txt > requirements_nopywin32.txt
      shell: bash
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements_nopywin32.txt
        pip install pillow pyinstaller
      shell: bash
    - name: 使用 PyInstaller 打包
      run: |
        pyinstaller --onefile --windowed --name=Time-Machine \
          --add-data "Time-Machine.ico:." \
          --add-data "config.json:." \
          --add-data "ui:ui" \
          --hidden-import=sip \
          --hidden-import=qfluentwidgets \
          --hidden-import=win11toast \
          --hidden-import=httpx \
          --paths=. \
          Time-Machine.py
      shell: bash
    - name: 创建包含其他文件夹的目录
      run: |
        mkdir -p ${{ env.OUTPUT_DIR }}
        cp dist/Time-Machine ${{ env.OUTPUT_DIR }}/
        cp -r ui/ ${{ env.OUTPUT_DIR }}/
        cp config.json ${{ env.OUTPUT_DIR }}/
        cp LICENSE ${{ env.OUTPUT_DIR }}/
        cp Time-Machine.ico ${{ env.OUTPUT_DIR }}/
      shell: bash
    - name: 清理旧压缩包
      run: |
        [ -f "${{ env.OUTPUT_DIR }}/${{ env.ARTIFACT_NAME }}" ] && rm "${{ env.OUTPUT_DIR }}/${{ env.ARTIFACT_NAME }}" || true
      shell: bash
    - name: 创建压缩包
      run: zip -r "${{ env.OUTPUT_DIR }}/${{ env.ARTIFACT_NAME }}" ${{ env.OUTPUT_DIR }}/*
      shell: bash
    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: Time-Machine-macOS
        path: "${{ env.OUTPUT_DIR }}/${{ env.ARTIFACT_NAME }}"
  Build-Linux:
    needs: Set-Version
    runs-on: ubuntu-latest
    env:
      PYTHON_VERSION: '3.9'
      OUTPUT_DIR: 'output'
      ARTIFACT_NAME: 'Time-Machine-Linux.zip'
    steps:
    - name: 检出最新版本
      uses: actions/checkout@v2
      with:
        ref: 'main'
    - name: 验证资源文件路径
      run: |
        ls -alh .
        [ -f "Time-Machine.ico" ] || (echo "bloret.ico not found" && exit 1)
        [ -f "config.json" ] || (echo "config.json not found" && exit 1)
        [ -d "ui" ] || (echo "ui directory not found" && exit 1)
      shell: bash
    - name: 设置 Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: 过滤掉 pywin32 和 win11toast 依赖
      run: |
        grep -ivE '^(pywin32|win11toast)' requirements.txt > requirements_nopywin32.txt
      shell: bash
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements_nopywin32.txt
        pip install pillow pyinstaller
      shell: bash
    - name: 使用 PyInstaller 打包
      run: |
        pyinstaller --onefile --windowed --name=Time-Machine \
          --add-data "Time-Machine.ico:." \
          --add-data "config.json:." \
          --add-data "ui:ui" \
          --hidden-import=sip \
          --hidden-import=qfluentwidgets \
          --hidden-import=win11toast \
          --hidden-import=httpx \
          --paths=. \
          Time-Machine.py
      shell: bash
    - name: 创建包含其他文件夹的目录
      run: |
        mkdir -p ${{ env.OUTPUT_DIR }}
        cp dist/Time-Machine ${{ env.OUTPUT_DIR }}/
        cp -r ui/ ${{ env.OUTPUT_DIR }}/
        cp config.json ${{ env.OUTPUT_DIR }}/
        cp LICENSE ${{ env.OUTPUT_DIR }}/
        cp Time-Machine.ico ${{ env.OUTPUT_DIR }}/
      shell: bash
    - name: 清理旧压缩包
      run: |
        [ -f "${{ env.OUTPUT_DIR }}/${{ env.ARTIFACT_NAME }}" ] && rm "${{ env.OUTPUT_DIR }}/${{ env.ARTIFACT_NAME }}" || true
      shell: bash
    - name: 创建压缩包
      run: zip -r "${{ env.OUTPUT_DIR }}/${{ env.ARTIFACT_NAME }}" ${{ env.OUTPUT_DIR }}/*
      shell: bash
    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: Time-Machine-Linux
        path: "${{ env.OUTPUT_DIR }}/${{ env.ARTIFACT_NAME }}"

  Collect-Artifacts:
    needs: [Build-Windows, Build-macOS, Build-Linux]
    runs-on: ubuntu-latest
    steps:
      - name: 下载 Windows 构建产物
        uses: actions/download-artifact@v4
        with:
          name: Time-Machine
          path: output/all/windows
      - name: 下载 macOS 构建产物
        uses: actions/download-artifact@v4
        with:
          name: Time-Machine-macOS
          path: output/all/macos
      - name: 下载 Linux 构建产物
        uses: actions/download-artifact@v4
        with:
          name: Time-Machine-Linux
          path: output/all/linux
      - name: 展示收集到的产物
        run: |
          ls -alR output/all
      - name: 上传所有平台产物
        uses: actions/upload-artifact@v4
        with:
          name: Time-Machine-All
          path: output/all/